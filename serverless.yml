service: MinecraftServer
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: prod

functions:
  function1:
    handler: index.handler
resources:
  Resources:
    MinecraftServerDNS:
      DependsOn:
        - MinecraftServerEIP
      Type: AWS::Route53::RecordSet
      Properties:
        HostedZoneId: Z003593719N1GIVWK6JKY
        Name: minecraft.emilioppv.com
        Type: A
        TTL: '300'
        ResourceRecords:
          - !Ref MinecraftServerEIP
    MinecraftServerEIP:
      DepensOn:
        - MinecraftServer
      Type: AWS::EC2::EIP
      Properties:
        InstanceId: !Ref MinecraftServer
        NetworkBorderGroup: us-east-1
        Tags:
          - Key: Minecraft Server
            Value: Elastic IP
    MinecraftServerBackupsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: empobla-minecraft-server-backups
        Tags:
          - Key: Minecraft Server
            Value: S3 Backups Bucket
    MinecraftServerRole:
      DependsOn:
        - MinecraftServerBackupsBucket
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          RoleName: 
            Fn::Join:
              - ''
              - - Ref: AWS::Region
                - '-'
                - minecraft-server-role
          Description: Role for Minecraft Server EC2 Instance
          Statement:
            - Effect: Allow
              Principal:
                Service: ec2.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: minecraft-server-backups-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - s3:ListBucket
                    - s3:ListBucketVersions
                    - s3:PutObject
                    - s3:PutObjectVersionTagging
                    - s3:PutObjectTagging
                  Resource:
                    - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: MinecraftServerBackupsBucket
                    - Fn::Join:
                      - ''
                      - - 'arn:aws:s3:::'
                        - Ref: MinecraftServerBackupsBucket
                        - '/*'
          - PolicyName: minecraft-server-stop-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action: ec2:StopInstances
                  Resource: '*'
                  Condition:
                    StringEquals:
                      ec2:ResourceTag/Name: Minecraft Server
        Tags:
          - Key: Minecraft Server
            Value: EC2 Role
    MinecraftServerProfile:
      DependsOn:
        - MinecraftServerRole
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - !Ref MinecraftServerRole
    MinecraftServerVolume:
      Type: AWS::EC2::Volume
      Properties:
        AvailabilityZone: us-east-1b
        Size: 8
        VolumeType: gp3
        Tags:
          - Key: Minecraft Server
            Value: EC2 Volume
    MinecraftServerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group with ports open for MC Server & SSH
        GroupName: Minecraft Server Security Group
        SecurityGroupEgress:
          - Description: Allow all traffic out
            IpProtocol: -1
            CidrIp: '0.0.0.0/0'
        SecurityGroupIngress:
          - Description: us-east-1 EC2 Instance Connect
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: '18.206.107.24/29'
          - Description: Open SSH Connection
            IpProtocol: tcp
            FromPort: 22
            ToPort: 22
            CidrIp: '0.0.0.0/0'
          - Description: Allow Minecraft Connections
            IpProtocol: tcp
            FromPort: 25565
            ToPort: 25565
            CidrIp: '0.0.0.0/0'
        Tags:
          - Key: Minecraft Server
            Value: EC2 Security Group
    MinecraftKeyPair:
      Type: AWS::EC2::KeyPair
      Properties:
        KeyFormat: pem
        KeyName: mcserver
        KeyType: rsa
        Tags:
          - Key: Minecraft Server
            Value: EC2 Key Pair
    MinecraftServer:
      DependsOn:
        - MinecraftServerProfile
        - MinecraftServerVolume
        - MinecraftServerSecurityGroup
      Type: AWS::EC2::Instance
      Properties:
        AvailabilityZone: us-east-1b
        IamInstanceProfile: !Ref MinecraftServerProfile
        ImageId: ami-07ce5684ee3b5482c
        InstanceType: t3.large
        KeyName: mcserver
        SecurityGroupIds:
          - Ref: MinecraftServerSecurityGroup
        Tags:
          - Key: Minecraft Server
            Value: EC2 Instance
          - Key: Name
            Value: Minecraft Server
        Volumes:
          - Device: /dev/xvda
            VolumeId: !GetAtt MinecraftServerVolume.VolumeId
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            
            MINECRAFTSERVERURL=https://piston-data.mojang.com/v1/objects/8dd1a28015f51b1803213892b50b7b4fc76e594d/server.jar

            sudo yum update -y

            # Download Java
            sudo yum install -y java-17-amazon-corretto-headless

            # Download Screen
            sudo yum install -y screen

            # Download Cronie
            sudo yum install -y cronie
            sudo systemctl enable crond.service
            sudo systemctl start crond.service

            # Download Git
            sudo yum install -y git

            # Download NVM
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
            . ~/.nvm/nvm.sh

            # Install NodeJS
            nvm install --lts
            
            # Install MC Java server in a directory we create
            adduser minecraft
            mkdir /opt/minecraft
            mkdir /opt/minecraft/server
            cd /opt/minecraft/server

            # Download server jar file from Minecraft official website
            wget $MINECRAFTSERVERURL

            # Download server scripts
            git clone https://github.com/empobla/Minecraft-Server.git setup

            # Move scripts to their appropriate locations
            mv setup/start start
            mv setup/stop stop
            
            mkdir backup
            mkdir backup/logs
            mv setup/backup backup
            
            mkdir setup/autoshutdown/logs
            mv setup/autoshutdown autoshutdown

            mv setup/minecraft.service /etc/systemd/system/minecraft.service
            mv setup/autoshutdown.service /etc/systemd/system/autoshutdown.service

            # Add execution permissions to the scripts
            chmod +x start stop backup/backup autoshutdown/autoshutdown
            sleep 1

            # Generate Minecraft server files and create script
            chown -R minecraft:minecraft /opt/minecraft/
            ./start
            sleep 40

            # Accept EULA
            sed -i 's/false/true/p' eula.txt

            # Create auto-backup cron job
            (crontab -l 2>/dev/null; echo '0 8 * * * /usr/bin/sh /opt/minecraft/server/backup/backup >> "/opt/minecraft/server/backup/logs/backup_$(/usr/bin/date +\%Y\%m\%d_\%H_\%M).log" 2>&1') | crontab -u minecraft -

            # Allow minecraft user to stop minecraft server without sudo
            printf '\nminecraft ALL=(root) NOPASSWD:/usr/bin/systemctl stop minecraft.service\n' >> /etc/sudoers.d/90-cloud-init-users

            # Enable and start SystemD services
            sudo systemctl daemon-reload
            sudo systemctl enable minecraft.service
            sudo systemctl enable autoshutdown.service
            sudo systemctl start minecraft.service
            sudo systemctl start autoshutdown.service