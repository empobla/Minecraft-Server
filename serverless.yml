service: MinecraftServer
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: prod

functions:
  function1:
    handler: index.handler
resources:
  Resources:
    MinecraftServer:
      Type: AWS::EC2::Instance
      Properties:
        ImageId: ami-07ce5684ee3b5482c
        InstanceType: t3.large
        KeyName: mcserver
        SecurityGroups:
          - Ref: MinecraftServerSecurityGroup
        Tags:
          - Key: Minecraft Server
            Value: EC2 Instance
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            
            MINECRAFTSERVERURL=https://piston-data.mojang.com/v1/objects/8dd1a28015f51b1803213892b50b7b4fc76e594d/server.jar

            sudo yum update -y

            # Download Java
            sudo yum install -y java-17-amazon-corretto-headless

            # Download Screen
            sudo yum install -y screen

            # Download Cronie
            sudo yum install -y cronie
            sudo systemctl enable crond.service
            sudo systemctl start crond.service

            # Download Git
            sudo yum install -y git

            # Download NVM
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
            . ~/.nvm/nvm.sh

            # Install NodeJS
            nvm install --lts
            
            # Install MC Java server in a directory we create
            adduser minecraft
            mkdir /opt/minecraft
            mkdir /opt/minecraft/server
            cd /opt/minecraft/server

            # Download server jar file from Minecraft official website
            wget $MINECRAFTSERVERURL

            # Generate Minecraft server files and create script
            chown -R minecraft:minecraft /opt/minecraft/
            java -Xmx7000M -Xms7000M -jar server.jar nogui
            sleep 40

            # Accept EULA
            sed -i 's/false/true/p' eula.txt

            # Create a script to start the server
            touch start
            printf '#!/bin/bash\njava -Xmx7000M -Xms7000M -jar server.jar nogui\n' >> start
            chmod +x start
            sleep 1

            # Create a script to stop the server
            touch stop
            printf '#!/bin/bash\nkill -9 $(ps -ef | pgrep -f "java")\n' >> stop
            chmod +x stop
            sleep 1

            # Create a script to back up the minecraft world
            mkdir backup
            mkdir backup/logs
            touch backupscript
            printf '#!/bin/bash\nFILENAME=backup_$(date +%%Y%%m%%d_%%H_%%M).zip\nzip -r $FILENAME /opt/minecraft/server/world\naws s3 cp $FILENAME s3://empobla-minecraft-server-backups/$FILENAME\nrm -rf $FILENAME\n' >> backupscript
            chmod +x backupscript
            sleep 1
            mv backupscript backup/backup

            # Create a script to shut down the server automatically when empty
            mkdir autoshutdown
            mkdir autoshutdown/logs
            cd autoshutdown
            touch package.json
            printf '{\n  "type": "module"\n  }\n}\n' >> package.json
            npm install minecraftstatuspinger
            touch countplayers.js

            # Create SystemD Script to run Minecraft server jar on reboot
            cd /etc/systemd/system/
            touch minecraft.service
            printf '[Unit]\nDescription=Minecraft Server on start up\nWants=network-online.target\n[Service]\nType=forking\nUser=minecraft\nWorkingDirectory=/opt/minecraft/server\nExecStart=/usr/bin/screen -dmS minecraft /opt/minecraft/server/start\nExecReload=/usr/bin/screen -p 0 -S minecraft -X eval '\''stuff "reload"\\\\015'\''\nExecStop=/usr/bin/screen -p 0 -S minecraft -X eval '\''stuff "say Shutting down in 10 seconds..."\\\\015'\''\nExecStop=/usr/bin/screen -p 0 -S minecraft -X eval '\''stuff "save-all"\\\\015'\''\nExecStop=/usr/bin/sleep 10\nExecStop=/opt/minecraft/server/stop\nExecStop=/usr/bin/bash -c '\''/opt/minecraft/server/backup/backup >> /opt/minecraft/server/backup/logs/backup_$$(date +%%%%Y%%%%m%%%%d_%%%%H_%%%%M).log 2>&1'\''\n[Install]\nWantedBy=multi-user.target\n' >> minecraft.service

    MinecraftServerSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Enable SSH access via port 22
        SecurityGroupIngress:
          - IpProtocol: tcp
            FromPort: '22'
            ToPort: '22'
            CidrIp: